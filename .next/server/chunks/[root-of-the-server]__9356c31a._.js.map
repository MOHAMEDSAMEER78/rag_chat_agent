{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["file:///Users/msameem/Dev/personal/sameer/rag_chat_agent/app/api/check-chroma/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\nexport async function GET() {\n  try {\n    const chromaUrl = process.env.CHROMA_URL || 'http://localhost:8000';\n    console.log('Server checking ChromaDB at:', chromaUrl);\n    \n    // Get auth credentials from environment or use defaults from docker-compose\n    const username = process.env.CHROMA_USERNAME || 'admin';\n    const password = process.env.CHROMA_PASSWORD || 'admin';\n    \n    // Use fetch with increased timeout to check ChromaDB availability\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout\n    \n    try {\n      const headers: HeadersInit = {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      };\n      \n      // Add basic auth header for Token Auth provider\n      // ChromaDB uses Basic Auth format: admin:admin in docker-compose\n      const base64Credentials = Buffer.from(`${username}:${password}`).toString('base64');\n      headers['Authorization'] = `Basic ${base64Credentials}`;\n      \n      console.log('Sending request to ChromaDB with auth');\n      \n      const response = await fetch(`${chromaUrl}/api/v2/heartbeat`, {\n        method: 'GET',\n        headers,\n        signal: controller.signal,\n      });\n      \n      clearTimeout(timeoutId);\n      \n      console.log('ChromaDB server response status:', response.status);\n      \n      if (response.ok) {\n        const responseText = await response.text();\n        console.log('ChromaDB server response text:', responseText);\n        \n        // Check if the response contains heartbeat data\n        if (responseText.includes('heartbeat')) {\n          return NextResponse.json({ \n            available: true, \n            message: 'ChromaDB is available',\n            details: responseText \n          });\n        }\n      }\n      \n      console.log('ChromaDB returned invalid response:', response.status);\n      return NextResponse.json({ \n        available: false, \n        message: `ChromaDB returned response with status: ${response.status}, but format was invalid`,\n        status: response.status\n      });\n    } catch (fetchError) {\n      clearTimeout(timeoutId);\n      console.error('Error connecting to ChromaDB:', fetchError);\n      \n      const errorMessage = fetchError instanceof Error ? fetchError.message : String(fetchError);\n      const isAbortError = errorMessage.includes('abort') || errorMessage.includes('timeout');\n      \n      return NextResponse.json({ \n        available: false, \n        message: isAbortError \n          ? `Timeout connecting to ChromaDB at ${chromaUrl}` \n          : `Error connecting to ChromaDB: ${errorMessage}`,\n        error: isAbortError ? 'TIMEOUT' : 'CONNECTION_ERROR'\n      });\n    }\n  } catch (error) {\n    console.error('Server-side error checking ChromaDB:', error);\n    return NextResponse.json({ \n      available: false, \n      message: `Error in ChromaDB check: ${error instanceof Error ? error.message : String(error)}`,\n      error: 'GENERAL_ERROR'\n    });\n  }\n} "],"names":[],"mappings":";;;AAAA;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,YAAY,QAAQ,GAAG,CAAC,UAAU,IAAI;QAC5C,QAAQ,GAAG,CAAC,gCAAgC;QAE5C,4EAA4E;QAC5E,MAAM,WAAW,QAAQ,GAAG,CAAC,eAAe,IAAI;QAChD,MAAM,WAAW,QAAQ,GAAG,CAAC,eAAe,IAAI;QAEhD,kEAAkE;QAClE,MAAM,aAAa,IAAI;QACvB,MAAM,YAAY,WAAW,IAAM,WAAW,KAAK,IAAI,OAAO,mBAAmB;QAEjF,IAAI;YACF,MAAM,UAAuB;gBAC3B,UAAU;gBACV,gBAAgB;YAClB;YAEA,gDAAgD;YAChD,iEAAiE;YACjE,MAAM,oBAAoB,OAAO,IAAI,CAAC,GAAG,SAAS,CAAC,EAAE,UAAU,EAAE,QAAQ,CAAC;YAC1E,OAAO,CAAC,gBAAgB,GAAG,CAAC,MAAM,EAAE,mBAAmB;YAEvD,QAAQ,GAAG,CAAC;YAEZ,MAAM,WAAW,MAAM,MAAM,GAAG,UAAU,iBAAiB,CAAC,EAAE;gBAC5D,QAAQ;gBACR;gBACA,QAAQ,WAAW,MAAM;YAC3B;YAEA,aAAa;YAEb,QAAQ,GAAG,CAAC,oCAAoC,SAAS,MAAM;YAE/D,IAAI,SAAS,EAAE,EAAE;gBACf,MAAM,eAAe,MAAM,SAAS,IAAI;gBACxC,QAAQ,GAAG,CAAC,kCAAkC;gBAE9C,gDAAgD;gBAChD,IAAI,aAAa,QAAQ,CAAC,cAAc;oBACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;wBACvB,WAAW;wBACX,SAAS;wBACT,SAAS;oBACX;gBACF;YACF;YAEA,QAAQ,GAAG,CAAC,uCAAuC,SAAS,MAAM;YAClE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,WAAW;gBACX,SAAS,CAAC,wCAAwC,EAAE,SAAS,MAAM,CAAC,wBAAwB,CAAC;gBAC7F,QAAQ,SAAS,MAAM;YACzB;QACF,EAAE,OAAO,YAAY;YACnB,aAAa;YACb,QAAQ,KAAK,CAAC,iCAAiC;YAE/C,MAAM,eAAe,sBAAsB,QAAQ,WAAW,OAAO,GAAG,OAAO;YAC/E,MAAM,eAAe,aAAa,QAAQ,CAAC,YAAY,aAAa,QAAQ,CAAC;YAE7E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,WAAW;gBACX,SAAS,eACL,CAAC,kCAAkC,EAAE,WAAW,GAChD,CAAC,8BAA8B,EAAE,cAAc;gBACnD,OAAO,eAAe,YAAY;YACpC;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wCAAwC;QACtD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,WAAW;YACX,SAAS,CAAC,yBAAyB,EAAE,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO,QAAQ;YAC7F,OAAO;QACT;IACF;AACF","debugId":null}}]
}